/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/character.glb --types --shadows 
*/

import * as THREE from 'three'
import React, { useEffect, useImperativeHandle, useRef } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'
import { a } from 'framer-motion/client'

type ActionName = '[保留アクション].002' | 'Idle.Save' | '[保留アクション].001' | 'Run.Save' | '[保留アクション]'

interface CharacterProps {
  characterRef: React.Ref<THREE.Group>,
  isMoving: boolean
}

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    球_1: THREE.SkinnedMesh
    球_2: THREE.SkinnedMesh
    球_3: THREE.SkinnedMesh
    球_4: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: {
    Black: THREE.MeshStandardMaterial
    マテリアル: THREE.MeshStandardMaterial
    Material: THREE.MeshBasicMaterial
    Cloth: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export default function Model({ characterRef, isMoving, ...props }: CharacterProps & JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>(null)
  const { scene, animations } = useGLTF('/models/character.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult

  const localRef = useRef<THREE.Group>(null);
  useImperativeHandle(characterRef, () => localRef.current as THREE.Group, []);

  const { actions } = useAnimations(animations, localRef)

  

  useEffect(() => {
    if (!actions || Object.keys(actions).length === 0) return;

    const idleAnimation = actions['Idle.Save'];

    if (idleAnimation) {
      idleAnimation.setLoop(THREE.LoopRepeat, Infinity);
      idleAnimation.play();
    }

    return () => {
      if (idleAnimation) {
        idleAnimation.stop();
      }
    };
  }, [actions])

  useEffect(() => {
    if (!actions) return
    const idleAction = actions['Idle.Save']
    const runAction = actions['Run.Save']

    if(!idleAction || !runAction) return

    if (isMoving) {
      idleAction.stop()
      runAction.timeScale = 2
      runAction.play()
    } else {
      runAction.stop()
      idleAction.play()
    }
  }, [isMoving, actions])

  return (
    <group ref={localRef} {...props} dispose={null}>
      <group name="Scene">
        <group name="アーマチュア" scale={0.868}>
          <primitive object={nodes.Root} />
          <group name="球">
            <skinnedMesh name="球_1" receiveShadow castShadow geometry={nodes.球_1.geometry} material={materials.Black} skeleton={nodes.球_1.skeleton} />
            <skinnedMesh name="球_2" receiveShadow castShadow geometry={nodes.球_2.geometry} material={materials.マテリアル} skeleton={nodes.球_2.skeleton} />
            <skinnedMesh name="球_3" receiveShadow castShadow geometry={nodes.球_3.geometry} material={materials.Material} skeleton={nodes.球_3.skeleton} />
            <skinnedMesh name="球_4" receiveShadow castShadow geometry={nodes.球_4.geometry} material={materials.Cloth} skeleton={nodes.球_4.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/character.glb')
