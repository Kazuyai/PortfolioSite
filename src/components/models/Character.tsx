/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/models/character.glb --types --shadows 
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    NURBSパス: THREE.Mesh
    NURBSパス001: THREE.Mesh
    NURBSパス002: THREE.Mesh
    NURBSパス003: THREE.Mesh
    ズボン: THREE.Mesh
    服: THREE.Mesh
    球_1: THREE.Mesh
    球_2: THREE.Mesh
    球002: THREE.SkinnedMesh
    Hips: THREE.Bone
  }
  materials: {
    Material: THREE.MeshBasicMaterial
    Black: THREE.MeshStandardMaterial
    Cloth: THREE.MeshStandardMaterial
    マテリアル: THREE.MeshStandardMaterial
    // Material: THREE.MeshBasicMaterial
  }
  // animations: GLTFAction[]
}

// export default function Model(props: JSX.IntrinsicElements['group'], ref: React.ForwardedRef<THREE.Group>) {
export default React.forwardRef<THREE.Group, JSX.IntrinsicElements["group"]>(function Model(props, ref) {
  const { scene } = useGLTF('/models/character.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;

  return (
    <group {...props} ref={ref} dispose={null}>
      <group position={[0, 1.266, 0]}>
        <primitive object={nodes.Hips} />
        <mesh castShadow receiveShadow geometry={nodes.NURBSパス.geometry} material={materials.Material} position={[0, 2.208, 0.904]} rotation={[0, 0, Math.PI / 2]} />
        <mesh castShadow receiveShadow geometry={nodes.NURBSパス001.geometry} material={materials.Material} position={[0, -1.266, 0]} rotation={[0, 0, -Math.PI / 2]} />
        <mesh castShadow receiveShadow geometry={nodes.NURBSパス002.geometry} material={materials.Material} position={[0, -1.266, 0]} rotation={[0, 0, -Math.PI / 2]} />
        <mesh castShadow receiveShadow geometry={nodes.NURBSパス003.geometry} material={materials.Material} position={[-0.147, -1.266, -0.171]} rotation={[0, 0, -Math.PI / 2]} />
        <mesh castShadow receiveShadow geometry={nodes.ズボン.geometry} material={materials.Black} position={[0, -1.266, 0]} scale={[1.058, 1, 1.058]} />
        <mesh castShadow receiveShadow geometry={nodes.服.geometry} material={materials.Cloth} position={[0, -1.236, 0]} />
        <group position={[0, -1.266, 0]}>
          <mesh castShadow receiveShadow geometry={nodes.球_1.geometry} material={materials.Black} />
          <mesh castShadow receiveShadow geometry={nodes.球_2.geometry} material={materials.マテリアル} />
        </group>
        <skinnedMesh geometry={nodes.球002.geometry} material={materials.Material} skeleton={nodes.球002.skeleton} />
      </group>
    </group>
  );
});

useGLTF.preload("/models/character.glb");